using System.Security.Principal;
using EntityFramework.Repository.Attributes;
using EntityFramework.Repository.Models;
using EntityFramework.Repository.Services.AuditTrails.Models;
using EntityFramework.Repository.Services.Extensions;
using Microsoft.EntityFrameworkCore;

namespace EntityFramework.Repository.Services.AuditTrails.Services;

public sealed class AuditTrailService
{
    private DbContext _context;

    private IPrincipal _principal;

    public AuditTrailService()
    {
        Audits = new List<AuditTrail>();
    }

    internal Action<IReadOnlyList<AuditTrail>> AuditingAction { get; set; }

    private List<AuditTrail> Audits { get; }

    public void SetDbContext(DbContext context)
    {
        _context = context;
    }

    internal void AddAuditingMethod(Action<IReadOnlyList<AuditTrail>> method, IPrincipal principal)
    {
        if (method != null) AuditingAction = method;

        _principal = principal;
    }


    public async Task<int> SaveChangesAsync(Func<DbContext, Task<int>> method)
    {
        var auditEntries = OnBeforeSaveChanges();
        var saveChangesResult = await method(_context);
        await OnAfterSaveChanges(auditEntries);
        foreach (var auditTrail in Audits) auditTrail.UserId = _principal.UserId();

        AuditingAction?.Invoke(Audits);
        Audits.Clear();
        return saveChangesResult;
    }

    private List<AuditEntry> OnBeforeSaveChanges()
    {
        _context.ChangeTracker.DetectChanges();
        var auditEntries = new List<AuditEntry>();
        foreach (var entry in _context.ChangeTracker.Entries().ToList())
        {
            var entityType = entry.Metadata.ClrType;

            var attributeValue = entityType.CustomAttribute<AuditTrailsAttribute>();

            if (attributeValue == null || attributeValue.Ignore) continue;

            var currentValues = entry.GetDatabaseValues();
            if (currentValues != null) entry.OriginalValues.SetValues(currentValues);

            var auditEntry = new AuditEntry(entry) { TableName = entry.Metadata.GetTableName() };
            auditEntries.Add(auditEntry);

            foreach (var property in entry.Properties)
            {
                if (property?.OriginalValue == null && property?.CurrentValue == null) property.IsModified = true;

                if (property.IsModified && property.CurrentValue == null && property?.OriginalValue != null)
                    property.IsModified = true;

                if (property.IsModified && property.CurrentValue == null && property?.OriginalValue == null)
                    property.IsModified = false;

                if (property.IsModified && property?.OriginalValue == property?.CurrentValue)
                    property.IsModified = false;

                if (property.IsModified && property.OriginalValue != null && property.CurrentValue != null &&
                    property.OriginalValue.Equals(property.CurrentValue))
                    property.IsModified = false;

                if (property.Metadata.PropertyInfo == null) continue;


                var propertyAuditAttribute =
                    property.Metadata.PropertyInfo.PropertyCustomAttribute<AuditTrailsAttribute>();
                if (propertyAuditAttribute is { Ignore: true }) continue;

                if (property.IsTemporary)
                {
                    // value will be generated by the database, get the value after saving
                    auditEntry.TemporaryProperties.Add(property);
                    continue;
                }

                var propertyName = property.Metadata.Name;
                if (property.Metadata.IsPrimaryKey())
                {
                    auditEntry.KeyValues[propertyName] = property.CurrentValue;
                    continue;
                }

                switch (entry.State)
                {
                    case EntityState.Added:
                        auditEntry.NewValues[propertyName] = property.CurrentValue;
                        break;

                    case EntityState.Deleted:
                        auditEntry.OldValues[propertyName] = property.OriginalValue;
                        break;

                    case EntityState.Modified:
                        if (property.IsModified)
                        {
                            auditEntry.OldValues[propertyName] = property.OriginalValue;
                            auditEntry.NewValues[propertyName] = property.CurrentValue;
                        }

                        break;
                }
            }
        }

        // Save audit entities that have all the modifications
        foreach (var auditEntry in auditEntries.Where(_ => !_.HasTemporaryProperties))
            if (auditEntry.NewValues.Count > 0 || auditEntry.OldValues.Count > 0)
                Audits.Add(auditEntry.ToAudit());

        // keep a list of entries where the value of some properties are unknown at this step
        return auditEntries.Where(_ => _.HasTemporaryProperties).ToList();
    }

    private Task OnAfterSaveChanges(List<AuditEntry> auditEntries)
    {
        if (auditEntries == null || auditEntries.Count == 0) return Task.CompletedTask;

        foreach (var auditEntry in auditEntries)
        {
            // Get the final value of the temporary properties
            foreach (var prop in auditEntry.TemporaryProperties)
                if (prop.Metadata.IsPrimaryKey())
                    auditEntry.KeyValues[prop.Metadata.Name] = prop.CurrentValue;
                else
                    auditEntry.NewValues[prop.Metadata.Name] = prop.CurrentValue;

            Audits.Add(auditEntry.ToAudit());
        }

        return Task.CompletedTask;
    }
}